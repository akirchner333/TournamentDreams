TO DO
- Write some tests for my swiss algorithm
- 

I'd like to be able to mix and match tournament types
i.e. one tournament type for a few rounds and then another afterwards
Or a tournament where for each "game" of the tournament you can have your own whole new tournament
	A *series*, or sequence of games between 2 players, can be thought of as a small tournament

Types of tournament connection:
	- Divide into groups and run them each through a type of tournament, then a different tournament
	- Each game is a mini-tournament
	- Starts as one type and then switches to the other

Should this be doable on this side i.e. it's easy to combine them to make new tournament types others can call
	Or easy to for an end user to do?

I should stop going around in circles on this and concentrate on making something I'm capable of running

One set of objects which are tournaments, and then another which combines tournaments

Here's the approach I'm currently going with:
-The base unit are all children of the AbstractTournament object
	- Some of, Series, only take 2 players. Others, a whole bunch
	- And then these tournaments can be combined by GameMods to make more kinds of tournaments
- I'm not trying to overly genericize these things - I write GameMods as I desire them
	- Right now, RRMultiple is the only one and it exists unto itself.
	- Eventually some patterns of reused code may reveal themselves and then I can make some consolidations
- Since tournaments have no opinions about the nature of games, I can link these things together at the top level
	- Just receive pairings from one tournament and feed them into another, however I may desire